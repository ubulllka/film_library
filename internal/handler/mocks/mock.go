// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"
	models "vk/internal/models"
	DTO "vk/internal/models/DTO"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// GetUser mocks base method.
func (m *MockAuthorization) GetUser(id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthorizationMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthorization)(nil).GetUser), id)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActor) CreateActor(actor models.Actor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActor)(nil).CreateActor), actor)
}

// DeleteActor mocks base method.
func (m *MockActor) DeleteActor(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorMockRecorder) DeleteActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActor)(nil).DeleteActor), id)
}

// GetActor mocks base method.
func (m *MockActor) GetActor(id int) (DTO.ActorDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", id)
	ret0, _ := ret[0].(DTO.ActorDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorMockRecorder) GetActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActor)(nil).GetActor), id)
}

// GetAllActors mocks base method.
func (m *MockActor) GetAllActors() ([]DTO.ActorDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActors")
	ret0, _ := ret[0].([]DTO.ActorDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActors indicates an expected call of GetAllActors.
func (mr *MockActorMockRecorder) GetAllActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActors", reflect.TypeOf((*MockActor)(nil).GetAllActors))
}

// UpdateActor mocks base method.
func (m *MockActor) UpdateActor(id int, input DTO.ActorUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorMockRecorder) UpdateActor(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActor)(nil).UpdateActor), id, input)
}

// MockFilm is a mock of Film interface.
type MockFilm struct {
	ctrl     *gomock.Controller
	recorder *MockFilmMockRecorder
}

// MockFilmMockRecorder is the mock recorder for MockFilm.
type MockFilmMockRecorder struct {
	mock *MockFilm
}

// NewMockFilm creates a new mock instance.
func NewMockFilm(ctrl *gomock.Controller) *MockFilm {
	mock := &MockFilm{ctrl: ctrl}
	mock.recorder = &MockFilmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilm) EXPECT() *MockFilmMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *MockFilm) CreateFilm(film models.Film, arr []int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", film, arr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockFilmMockRecorder) CreateFilm(film, arr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockFilm)(nil).CreateFilm), film, arr)
}

// DeleteFilm mocks base method.
func (m *MockFilm) DeleteFilm(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmMockRecorder) DeleteFilm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilm)(nil).DeleteFilm), id)
}

// GetAllFilms mocks base method.
func (m *MockFilm) GetAllFilms(column, order string) ([]DTO.FilmDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilms", column, order)
	ret0, _ := ret[0].([]DTO.FilmDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilms indicates an expected call of GetAllFilms.
func (mr *MockFilmMockRecorder) GetAllFilms(column, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilms", reflect.TypeOf((*MockFilm)(nil).GetAllFilms), column, order)
}

// GetFilm mocks base method.
func (m *MockFilm) GetFilm(id int) (DTO.FilmDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", id)
	ret0, _ := ret[0].(DTO.FilmDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockFilmMockRecorder) GetFilm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockFilm)(nil).GetFilm), id)
}

// SearchFilms mocks base method.
func (m *MockFilm) SearchFilms(fragment string) ([]DTO.FilmDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilms", fragment)
	ret0, _ := ret[0].([]DTO.FilmDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilms indicates an expected call of SearchFilms.
func (mr *MockFilmMockRecorder) SearchFilms(fragment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilms", reflect.TypeOf((*MockFilm)(nil).SearchFilms), fragment)
}

// UpdateFilm mocks base method.
func (m *MockFilm) UpdateFilm(id int, input DTO.FilmUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockFilmMockRecorder) UpdateFilm(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockFilm)(nil).UpdateFilm), id, input)
}
